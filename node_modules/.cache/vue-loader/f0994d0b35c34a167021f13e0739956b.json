{"remainingRequest":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!P:\\noenter\\basconi-frontend-master\\src\\modules\\management\\roles\\index.vue?vue&type=style&index=0&id=23231ad5&scoped=true&lang=css&","dependencies":[{"path":"P:\\noenter\\basconi-frontend-master\\src\\modules\\management\\roles\\index.vue","mtime":1695884236902},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":1695882312813},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1695882545754},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1695882308750},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1695882313197},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1695882545643}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci50YWJsZSB7CiAgZm9udC1mYW1pbHk6IC1hcHBsZS1zeXN0ZW0sIEJsaW5rTWFjU3lzdGVtRm9udCwgIlNlZ29lIFVJIiwgUm9ib3RvLCBPeHlnZW4sCiAgICBVYnVudHUsIENhbnRhcmVsbCwgIk9wZW4gU2FucyIsICJIZWx2ZXRpY2EgTmV1ZSIsIHNhbnMtc2VyaWY7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICB3aWR0aDogODAlOwogIG1hcmdpbjogMCBhdXRvOwogIGZvbnQtc2l6ZTogMThweDsKICB0ZXh0LWFsaWduOiBjZW50ZXI7Cn0KCi50YWJsZSB0ZCwKLnRhYmxlIHRoIHsKICBib3JkZXI6IDFweCBzb2xpZCAjZGRkOwogIHBhZGRpbmc6IDhweDsKfQoKdGFibGUudGFibGUgdGJvZHkgdHIuc2VsZWN0ZWQgewogIGJhY2tncm91bmQtY29sb3I6ICNmMmYyZjI7Cn0KCi50YWJsZSB0cjpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogI2RkZCAhaW1wb3J0YW50Owp9CgoudGFibGUgdGggewogIHBhZGRpbmctdG9wOiAxMnB4OwogIHBhZGRpbmctYm90dG9tOiAxMnB4OwogIHRleHQtYWxpZ246IGxlZnQ7CiAgYmFja2dyb3VuZC1jb2xvcjogIzRjYWY1MDsKICBjb2xvcjogd2hpdGU7Cn0KCgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAoSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/modules/management/roles","sourcesContent":["<template>\n  <div>\n    <q-table\n      class=\"shadow-10\"\n      bordered\n      :data=\"roles\"\n      row-key=\"id\"\n      row=\"row\"\n      virtual-scroll\n      :columns=\"columns\"\n      :hide-pagination=\"true\"\n      :rows-per-page-options=\"[0]\"\n    >\n      <template v-slot:top>\n        <div class=\"q-table__title\">{{ $t('management.roles') }}</div>\n        <q-space/>\n        <vs-button v-if=\"$can('create', 'role')\" success animation-type=\"rotate\" @click=\"createForm\">\n          <q-icon name=\"add\"/>\n          <template #animate>\n            <q-icon name=\"add\"/>\n          </template>\n        </vs-button>\n      </template>\n\n      <template v-slot:body-cell-code=\"props\">\n        <q-td class=\"text-center\">\n          <q-badge>{{ props.row.code }}</q-badge>\n        </q-td>\n      </template>\n      <template v-slot:body-cell-action=\"props\">\n        <q-td class=\"text-center\">\n          <vs-button style=\"display: inline-block\" flat icon primary @click=\"editForm(props.row)\">\n            <q-icon name=\"edit\"/>\n          </vs-button>\n          <vs-button style=\"display: inline-block\" flat icon success @click=\"permissionForm(props.row)\">\n            <q-icon name=\"security\"/>\n          </vs-button>\n          <vs-button style=\"display: inline-block\" flat icon danger @click=\"deleteModalTrue(props.row.id)\">\n            <q-icon name=\"delete\"/>\n          </vs-button>\n        </q-td>\n      </template>\n    </q-table>\n    <!--    Create / Edit   -->\n    <vs-dialog blur prevent-close v-model=\"createModal\">\n      <template #header>\n        <b v-if=\"create\">{{ $t('management.new_role') }}</b>\n        <b v-else>{{ $t('management.edit_role') }}</b>\n      </template>\n      <q-separator/>\n      <form ref=\"roleForm\">\n        <vs-input state=\"primary\" v-model=\"form.name\" class=\"mt-3\" :class=\"form.name == '' ? 'required' : ''\" :danger=\"form.name == ''\" block :label=\"$t('doc.name')\" :placeholder=\"$t('doc.name')\"></vs-input>     \n      </form>\n      <template #footer>\n        <vs-button class=\"mt-2\" @keyup.enter=\"save\" block primary gradient @click=\"save\">{{ $t('actions.save') }}</vs-button>\n      </template>\n    </vs-dialog>\n    <!--     Permissions     -->\n    <q-dialog maximized persistent transition-show=\"slide-up\" transition-hide=\"slide-down\" v-model=\"permissionModal\">\n      <q-card style=\"margin-top: 60px; padding-bottom: 60px\">\n        <q-toolbar class=\"bg-grey-8\">\n          <q-btn round push icon=\"close\" class=\"text-red-5\" v-close-popup @click=\"permissionIds = [], roleId = null\">\n            <q-tooltip class=\"bg-white text-primary\">Close</q-tooltip>\n          </q-btn>\n          <q-space/>\n          <vs-button success gradient @click=\"savePermissions\">{{ $t('actions.save') }}</vs-button>\n        </q-toolbar>\n        <q-card-section>\n          <q-card v-for=\"(perm, i) in permissions\" :key=\"`item-${i}`\">\n            <q-list bordered padding separator>\n              <q-item tag=\"label\" v-ripple>\n                <q-item-section>\n                  <q-item-label>{{ $t(`permissions.${perm.name}`) }}</q-item-label>\n                </q-item-section>\n                <q-item-section side top>\n                  <q-toggle v-model=\"permissionIds\" :val=\"perm.id\"/>\n                </q-item-section>\n              </q-item>\n            </q-list>\n          </q-card>\n        </q-card-section>\n      </q-card>\n    </q-dialog>\n\n    <!--     Delete     -->\n    <confirm-modal :model=\"deleteModal\" @submit=\"deleteRole\" @close=\"deleteModal = false\" :text=\"$t('confirm_delete')\"/>\n  </div>\n</template>\n\n<script>\nimport RolesService from \"./role.service\";\nimport ConfirmModal from \"../../../components/confirmModal\";\n\nexport default {\n  name: \"index\",\n  components: {ConfirmModal},\n  computed: {\n    isChecked() {\n      return false\n    }\n  },\n  data() {\n    return {\n      windowWidth: window.innerWidth,\n      search: '',\n      createModal: false,\n      permissionModal: false,\n      editingItem: {},\n      permissions: [{ id: 1, name: 'add user'}],\n      permissionIds: [],\n      roles: [{ id: 1, name: 'admin', code: 'admin' },\n      {id: 2, name: 'admin', code: 'admin'}],\n      roleId: '',\n      form: {\n        id: null,\n        code: null,\n        name: null\n      },\n      create: true,\n      deleteModal: false,\n      columns: [\n        {name: 'id', align: 'center', label: this.$t('doc.index'), field: 'id'},\n        {name: 'name', align: 'left', label: this.$t('doc.name'), field: 'name'},\n        {name: 'code', align: 'center', label: this.$t('doc.code'), field: 'code'},\n        {name: 'action', align: 'center', label: this.$t('doc.action'), field: 'action'}\n      ]\n    }\n  },\n  methods: {\n    async getRoleList() {\n      await RolesService.getRoleList().then(res => {\n        this.roles = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          type:'confirm',\n          duration: 1000,\n          title: e.message,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    editForm(item) {\n      this.create = false\n      this.form = Object.assign({}, item)\n      this.createModal = true\n    },\n    createForm() {\n      this.create = true\n      this.form = {}\n      this.createModal = true\n    },\n    save() {\n      if (this.create) {\n        if (this.form.name && this.form.code) {\n          RolesService.createRole(this.form).then(res => {\n            this.createModal = false\n            this.$vs.notification({\n              type:'confirm',\n              duration: 1000,\n              title: this.$t('success_created'),\n              progress: 'auto',\n              color: 'success',\n              position: 'top-right'\n            })\n            this.getRoleList();\n          }).catch(e => {\n            this.$vs.notification({\n              type:'confirm',\n              duration: 1000,\n              title: e.message,\n              progress: 'auto',\n              color: 'danger',\n              position: 'top-right'\n            })\n          })\n        } else {\n          if (!this.form.name) {\n            this.$refs.roleForm[0].className += ' required'\n          }\n          if (!this.form.code) {\n            this.$refs.roleForm[1].className += ' required'\n          }\n        }\n      } else {\n        if (this.form.name && this.form.code) {\n          RolesService.updateRole(this.form.id, this.form).then(res => {\n            this.createModal = false\n            this.$vs.notification({\n              type:'confirm',\n              duration: 1000,\n              title: this.$t('success_updated'),\n              progress: 'auto',\n              color: 'success',\n              position: 'top-right'\n            })\n            this.getRoleList();\n          }).catch(e => {\n            this.$vs.notification({\n              type:'confirm',\n              duration: 1000,\n              title: e.message,\n              progress: 'auto',\n              color: 'danger',\n              position: 'top-right'\n            })\n          })\n        }\n      }\n    },\n    permissionForm(item) {\n      this.roleId = null\n      this.permissionModal = true\n      this.permissionIds = [1,2,3,4,5,6]\n      // RolesService.getPermissionList().then(res => {\n      //   this.roleId = item.id\n      //   this.permissions = res.data\n      //   this.permissionIds = item.permissionIds\n      //   this.permissionModal = true\n      // }).catch(e => {\n      //   this.$vs.notification({\n      //     type:'confirm',\n      //     duration: 1000,\n      //     title: e.message,\n      //     progress: 'auto',\n      //     color: 'danger',\n      //     position: 'top-right'\n      //   })\n      // })\n    },\n    savePermissions() {\n      RolesService.updateRolePermissionsById(this.roleId, this.permissionIds).then(res => {\n        this.permissionModal = false\n        this.roleId = null\n        this.permissionIds = []\n        this.getRoleList();\n        this.$vs.notification({\n          type:'confirm',\n          duration: 1000,\n          title: this.$t('success_updated'),\n          progress: 'auto',\n          color: 'success',\n          position: 'top-right'\n        })\n      }).catch(e => {\n        this.$vs.notification({\n          type:'confirm',\n          duration: 1000,\n          title: e.message,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    deleteModalTrue(id) {\n      this.roleId = null\n      this.deleteModal = true\n      this.roleId = id\n    },\n    deleteRole() {\n      RolesService.deleteRole(this.roleId).then(res => {\n        this.deleteModal = false\n        this.$vs.notification({\n          type:'confirm',\n          duration: 1000,\n          title: this.$t('success_deleted'),\n          progress: 'auto',\n          color: 'success',\n          position: 'top-right'\n        })\n        this.getRoleList();\n      }).catch(e => {\n        this.$vs.notification({\n          type:'confirm',\n          duration: 1000,\n          title: e.message,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    }\n  },\n  created() {\n    this.getRoleList();\n  }\n}\n</script>\n\n<style scoped>\n.table {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen,\n    Ubuntu, Cantarell, \"Open Sans\", \"Helvetica Neue\", sans-serif;\n  border-collapse: collapse;\n  width: 80%;\n  margin: 0 auto;\n  font-size: 18px;\n  text-align: center;\n}\n\n.table td,\n.table th {\n  border: 1px solid #ddd;\n  padding: 8px;\n}\n\ntable.table tbody tr.selected {\n  background-color: #f2f2f2;\n}\n\n.table tr:hover {\n  background-color: #ddd !important;\n}\n\n.table th {\n  padding-top: 12px;\n  padding-bottom: 12px;\n  text-align: left;\n  background-color: #4caf50;\n  color: white;\n}\n\n\n</style>\n"]}]}