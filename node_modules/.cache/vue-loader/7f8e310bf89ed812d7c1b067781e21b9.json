{"remainingRequest":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!P:\\noenter\\basconi-frontend-master\\src\\modules\\references\\product\\index.vue?vue&type=style&index=0&id=7d2f724c&scoped=true&lang=css&","dependencies":[{"path":"P:\\noenter\\basconi-frontend-master\\src\\modules\\references\\product\\index.vue","mtime":1652787130000},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\css-loader\\dist\\cjs.js","mtime":1695882312813},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1695882545754},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1695882308750},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1695882313197},{"path":"P:\\noenter\\basconi-frontend-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1695882545643}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5kZXNrdG9wewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDI4cHg7CiAgbGVmdDogMTQ1cHgKfQoubW9iaWxlewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDI2cHg7CiAgbGVmdDogMTEwcHgKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AA4gBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/modules/references/product","sourcesContent":["<template>\n  <div>\n    <q-table\n      class=\"shadow-10\"\n      row-key=\"id\"\n      row=\"row\"\n      :data=\"items\"\n      :columns=\"columns\"\n      :hide-pagination=\"true\"\n      :rows-per-page-options=\"[0]\"\n    >\n      <template v-slot:top>\n        <div v-if=\"windowWidth > 600\" class=\"q-table__title\">{{ $t('references.product') }}</div>\n        <q-space v-if=\"windowWidth > 600\"/>\n        <vs-input state=\"primary\" icon-after class=\"q-mr-lg\" v-model=\"search\" :placeholder=\"$t('actions.search')\">\n          <template #icon>\n            <q-icon name=\"search\"/>\n          </template>\n        </vs-input>\n        <q-space v-if=\"windowWidth < 600\"/>\n        <vs-button v-if=\"$can('Save', 'Item')\" success animation-type=\"rotate\" @click=\"createForm\">\n          <q-icon name=\"add\"/>\n          <template #animate>\n            <q-icon name=\"add\"/>\n          </template>\n        </vs-button>\n        <q-separator/>\n      </template>\n      <template v-slot:body-cell-id=\"props\">\n        <q-td class=\"text-center\">{{ paginate(payload.limit, payload.page, props.rowIndex) }}</q-td>\n      </template>\n      <template v-slot:body-cell-sizeId=\"props\">\n        <q-td class=\"text-center\">\n          <q-badge v-for=\"size in props.row.sizes\" class=\"mr-1\">{{ size.olcham }}</q-badge>\n        </q-td>\n      </template>\n      <template v-slot:body-cell-actions=\"props\">\n        <q-td class=\"text-center\">\n          <vs-button v-if=\"$can('Update', 'Item')\" style=\"display: inline-block\" flat icon primary @click=\"editForm(props.row.id)\">\n            <q-icon name=\"edit\"/>\n          </vs-button>\n          <vs-button v-if=\"$can('Delete', 'Item')\" style=\"display: inline-block\" flat icon danger @click=\"deleteForm(props.row.id)\">\n            <q-icon name=\"delete\"/>\n          </vs-button>\n        </q-td>\n      </template>\n    </q-table>\n    <div class=\"row justify-center q-mt-md\">\n      <q-pagination v-model=\"payload.page\" :max=\"maxItem\"  :max-pages=\"4\" direction-links boundary-links push/>\n    </div>\n\n    <!--           Create / Edit           -->\n    <vs-dialog v-model=\"createEditModal\" @close=\"getProductList\" prevent-close>\n      <template #header>\n        <b v-if=\"create\">{{ $t('references.new_item') }}</b>\n        <b v-else>{{ $t('references.edit_item') }}</b>\n      </template>\n      <q-separator/>\n      <validation-observer ref=\"itemForm\" v-slot=\"{}\">\n        <vs-row>\n          <vs-col>\n<!--            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"name\">-->\n<!--              <vs-input-->\n<!--                  block-->\n<!--                  primary-->\n<!--                  class=\"mt-3\"-->\n<!--                  :danger=\"!valid\"-->\n<!--                  v-model=\"formItem.name\"-->\n<!--                  :label=\"$t('items.name')\"-->\n<!--                  :placeholder=\"$t('items.name')\"-->\n<!--                  :class=\"!valid ? 'required' : ''\"-->\n<!--              />-->\n<!--            </validation-provider>-->\n<!--            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"unitId\">-->\n<!--              <vs-select-->\n<!--                  block-->\n<!--                  class=\"mt-3\"-->\n<!--                  :danger=\"!valid\"-->\n<!--                  :label=\"$t('items.unit')\"-->\n<!--                  :placeholder=\"$t('items.unit')\"-->\n<!--                  v-model=\"formItem.unitId\"-->\n<!--                  :class=\"!valid ? 'required' : ''\"-->\n<!--              >-->\n<!--                <vs-option-group>-->\n<!--                  <div>{{ $t('items.unit') }}</div>-->\n<!--                  <vs-option v-for=\"(u, index) in units\" :key=\"`select-unit-${index}`\" :label=\"u.name\" :value=\"u.id\">-->\n<!--                    {{ u.name }}-->\n<!--                  </vs-option>-->\n<!--                </vs-option-group>-->\n<!--              </vs-select>-->\n<!--            </validation-provider>-->\n            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"categoryId\">\n              <vs-select\n                  block\n                  class=\"mt-3\"\n                  :danger=\"!valid\"\n                  :label=\"$t('items.category')\"\n                  :placeholder=\"$t('items.category')\"\n                  v-model=\"formItem.categoryId\"\n                  :class=\"!valid ? 'required' : ''\"\n                  :key=\"`categories-${categories.length}`\"\n              >\n                <vs-option-group>\n                  <div>{{ $t('items.category') }}</div>\n                  <vs-option v-for=\"cat in categories\" :key=\"cat.id\" :label=\"cat.name\" :value=\"cat.id\">\n                    {{ cat.name }}\n                  </vs-option>\n                </vs-option-group>\n              </vs-select>\n            </validation-provider>\n            <validation-provider name=\"brandId\">\n              <vs-select\n                block\n                class=\"mt-3\"\n                :label=\"$t('items.brand')\"\n                :placeholder=\"$t('items.brand')\"\n                v-model=\"formItem.brandId\"\n                :key=\"`brands-${brands.length}`\"\n              >\n                <vs-option-group>\n                  <div>{{ $t('items.brand') }}</div>\n                  <vs-option v-for=\"(b,inde) in brands\" :key=\"`brand-${inde}`\" :label=\"b.name\" :value=\"b.id\">\n                    {{ b.name }}\n                  </vs-option>\n                </vs-option-group>\n              </vs-select>\n            </validation-provider>\n            <validation-provider  name=\"colorId\">\n              <vs-select\n                block\n                class=\"mt-3\"\n                v-model=\"formItem.colorId\"\n                :label=\"$t('references.color')\"\n                :placeholder=\"$t('references.color')\"\n                :key=\"`colors-${colors.length}`\"\n              >\n                <vs-option-group>\n                  <div>{{ $t('references.color') }}</div>\n                  <vs-option v-for=\"(c,col) in colors\" :key=\"`brand-${col}`\" :label=\"c.name\" :value=\"c.id\">\n                    {{ c.name }}\n                  </vs-option>\n                </vs-option-group>\n              </vs-select>\n            </validation-provider>\n            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"sizeIds\">\n              <vs-select\n                  block\n                  multiple\n                  class=\"mt-3\"\n                  :danger=\"!valid\"\n                  v-model=\"sizeIds\"\n                  :label=\"$t('references.size')\"\n                  :placeholder=\"$t('references.size')\"\n                  :class=\"!valid ? 'required' : ''\"\n                  :key=\"`sizes-${sizes.length}`\"\n              >\n                <vs-option-group>\n                  <div>{{ $t('references.size') }}</div>\n                  <vs-option v-for=\"(s,si) in sizes\" :key=\"`size-${si}`\" :label=\"s.olcham\" :value=\"s.id\">\n                    {{ s.olcham }}\n                  </vs-option>\n                </vs-option-group>\n              </vs-select>\n            </validation-provider>\n            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"seasons\" style=\"position: relative\">\n              <vs-select\n                  block\n                  class=\"mt-3\"\n                  v-model=\"formItem.seasonsId\"\n                  :label=\"$t('references.seasons')\"\n                  :placeholder=\"$t('references.seasons')\"\n                  :key=\"`seasonList-${seasonList.length}`\"\n              >\n                <vs-option-group>\n                  <div>{{ $t('references.seasons') }}</div>\n                  <vs-option v-for=\"(c,se) in seasonList\" :key=\"`brand-${se}`\" :label=\"c.name\" :value=\"c.id\">\n                    {{ c.name }}\n                  </vs-option>\n                </vs-option-group>\n              </vs-select>\n            </validation-provider>\n            <validation-provider v-slot=\"{valid}\" rules=\"required\" name=\"scu\" style=\"position: relative\">\n              <vs-input\n                  block\n                  primary\n                  class=\"mt-3\"\n                  :danger=\"!valid\"\n                  v-model=\"formItem.cku\"\n                  :label=\"$t('items.sku')\"\n                  :placeholder=\"$t('items.sku')\"\n                  :class=\"!valid ? 'required' : ''\"\n              />\n              <vs-button icon primary :class=\"windowWidth > 600 ? 'desktop' : 'mobile'\" @click=\"generateSku\">\n                <q-icon name=\"refresh\"/>\n              </vs-button>\n            </validation-provider>\n          </vs-col>\n        </vs-row>\n      </validation-observer>\n      <template #footer>\n        <vs-button class=\"mt-2\" block primary gradient @click=\"save\">{{ $t('actions.save') }}</vs-button>\n      </template>\n    </vs-dialog>\n\n    <!--           Delete           -->\n    <confirm-modal :model=\"deleteModal\" @submit=\"deleteItem\" @close=\"deleteModal = false\" :text=\"$t('confirm_delete')\"/>\n  </div>\n</template>\n\n<script>\nimport ProductService from \"./product.service\";\nimport ConfirmModal from \"../../../components/confirmModal.vue\"\nimport CategoryService from \"../category-product/category.service\";\nimport SizeService from '../size-product/size.service';\nimport ColorService from '../color-product/color.service';\nimport SeasonService from \"@/modules/references/seasons/seasons.service\";\n\nexport default {\n  name: \"index\",\n  components: {ConfirmModal,},\n  data() {\n    return {\n      search: '',\n      windowWidth: window.innerWidth,\n      items: [],\n      totalItems: 0,\n      columns: [\n        {name: 'id', align: 'center', label: this.$t('items.index'), field: 'index'},\n        {name: 'brandName', align: 'center', label: this.$t('items.brand'), field: 'brandName'},\n        // {name: 'name', align: 'center', label: this.$t('items.name'), field: 'name'},\n        {name: 'categoryName', align: 'center', label: this.$t('items.category'), field: 'categoryName'},\n        {name: 'cku', align: 'center', label: this.$t('items.sku'), field: 'cku'},\n        {name: 'sizeId', align: 'center', label: this.$t('items.size'), field: 'sizeId'},\n        // {name: 'unitName', align: 'center', label: this.$t('items.unit'), field: 'unitName'},\n        {name: 'color', align: 'center', label: this.$t('items.colors'), field: 'colorName'},\n        {name: 'seasonsName', align: 'center', label: this.$t('items.seasons'), field: 'seasonsName'},\n        {name: 'actions', align: 'center', label: this.$t('items.action'), field: 'actions'},\n      ],\n      create: true,\n      createEditModal: false,\n      deleteModal: false,\n      itemId: null,\n      // units: [],\n      brands: [],\n      categories: [],\n      colors: [],\n      sizes: [],\n      sizeIds: [],\n      payload: {\n        page: 1,\n        limit: 20\n      },\n      formItem: {\n        // name: null,\n        // unitId: '',\n        brandId: '',\n        colorId: '',\n        sizeId: '',\n        barcode: '',\n        categoryId: '',\n        cku: '',\n        seasonsId: ''\n      },\n      seasonList: []\n    }\n  },\n  computed: {\n    maxItem() {\n      let max = this.totalItems / this.payload.limit\n      return Math.ceil(max)\n    }\n  },\n  methods: {\n    getProductList() {\n      ProductService.getItemsList(this.payload, this.search).then(res => {\n        this.items = res.data.list\n        this.totalItems = res.data.total\n      }).catch(e => {\n        this.$vs.notification({\n          duration: 1000,\n          title: e.message,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    getSeasonsList() {\n      SeasonService.getSeasons().then(res => {\n        this.seasonList = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          duration: 1000,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    // getUnit() {\n    //   ProductService.getReferenceUnit().then(res => {\n    //     this.units = res.data\n    //   }).catch(e => {\n    //     this.$vs.notification({\n    //       title: e.message,\n    //       duration: 1000,\n    //       progress: 'auto',\n    //       color: 'danger',\n    //       position: 'top-right'\n    //     })\n    //   })\n    // },\n    getBrand() {\n      ProductService.getReferenceBrand().then(res => {\n        this.brands = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          duration: 1000,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    getSizeLIst() {\n      SizeService.getSizes().then(res => {\n        this.sizes = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          duration: 1000,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    getColorsList() {\n      ColorService.getColors().then(res => {\n        this.colors = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          duration: 1000,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    getCategories() {\n      CategoryService.getCategory().then(res => {\n        this.categories = res.data\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          duration: 1000,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    },\n    paginate(itemsPerPage, currentPage, index) {\n      currentPage = currentPage - 1\n      return itemsPerPage * currentPage + (index + 1)\n    },\n    generateSku() {\n      if (this.formItem.categoryId) {\n        ProductService.generateSku(this.formItem.categoryId).then(res => {\n          this.formItem.cku = res.data\n        }).catch(e => {\n          this.$vs.notification({\n            title: e.message,\n            duration: 1000,\n            progress: 'auto',\n            color: 'danger',\n            position: 'top-right'\n          })\n        })\n      } else {\n        this.$vs.notification({\n          title: this.$t('required_category'),\n          progress: 'auto',\n          duration: 1000,\n          color: 'warn',\n          position: 'top-right'\n        })\n      }\n    },\n    // generateBarcode() {\n    //   ProductService.generateBarcode().then(res => {\n    //     this.formItem.barcode = res.data\n    //   }).catch(e => {\n    //     this.$vs.notification({\n    //       title: e.message,\n    //       duration: 1000,\n    //       progress: 'auto',\n    //       color: 'danger',\n    //       position: 'top-right'\n    //     })\n    //   })\n    // },\n    createForm() {\n      this.create = true\n      // this.formItem.name = null\n      this.formItem.barcode = null\n      this.formItem.cku = ''\n      // this.formItem.unitId = ''\n      this.formItem.categoryId = ''\n      this.formItem.brandId = ''\n      this.formItem.colorId = ''\n      this.formItem.sizeId = ''\n      this.formItem.seasonsId = ''\n      this.createEditModal = true\n    },\n    editForm(id) {\n      this.itemId = id\n      this.create = false\n      this.items.forEach(lol => {\n        if(lol.id === this.itemId) {\n          let item = lol\n          this.createEditModal = true\n          this.formItem = item\n          this.formItem.id = `${item.id}`\n          // this.formItem.name = `${item.name}`\n          this.formItem.cku = `${item.cku}`\n          // this.formItem.unitId = `${item.unitId}`\n          this.formItem.categoryId = `${item.categoryId}`\n          this.formItem.brandId = `${item.brandId}`\n          this.formItem.colorId = `${item.colorId}`\n          this.formItem.sizeId = `${item.sizeId}`\n          this.formItem.seasonsId = `${item.seasonsId}`\n          this.create = false\n        }\n      })\n    },\n    save() {\n      this.$refs.itemForm.validate().then(valid => {\n        if (valid) {\n          if (this.create) {\n            this.formItem.sizeId = this.sizeIds\n            ProductService.createItem(this.formItem).then(res => {\n              this.getProductList()\n              this.createEditModal = false\n            }).catch(e => {\n              this.$vs.notification({\n                title: e.message,\n                duration: 1000,\n                progress: 'auto',\n                color: 'danger',\n                position: 'top-right'\n              })\n            })\n            this.formItem = {}\n            this.sizeIds = []\n          } else {\n            ProductService.updateItem(this.formItem).then(res => {\n              this.createEditModal = false\n              this.getProductList();\n              this.formItem = {}\n              this.sizeIds = []\n              this.itemId = null\n            }).catch(e => {\n              this.$vs.notification({\n                title: e.message,\n                duration: 1000,\n                progress: 'auto',\n                color: 'danger',\n                position: 'top-right'\n              })\n            })\n            this.formItem = {}\n          }\n        }\n      })\n    },\n    deleteForm(id) {\n      this.itemId = id\n      this.deleteModal = true\n    },\n    deleteItem() {\n      ProductService.deleteItem(this.itemId).then(res => {\n        this.deleteModal = true\n        duration: 1000,\n        this.getProductList()\n        this.deleteModal = false\n      }).catch(e => {\n        this.$vs.notification({\n          title: e.message,\n          progress: 'auto',\n          color: 'danger',\n          position: 'top-right'\n        })\n      })\n    }\n  },\n  watch: {\n    'search': {\n      handler(e) {\n        this.getProductList();\n      }\n    },\n    'payload.page': {\n      handler(e) {\n        this.getProductList();\n      }\n    }\n  },\n  created() {\n    this.getSeasonsList()\n    // this.getUnit();\n    this.getBrand();\n    this.getCategories();\n    this.getSizeLIst();\n    this.getColorsList();\n    this.getProductList();\n  }\n}\n</script>\n\n<style scoped>\n.desktop{\n  position: absolute;\n  top: 28px;\n  left: 145px\n}\n.mobile{\n  position: absolute;\n  top: 26px;\n  left: 110px\n}\n</style>\n"]}]}