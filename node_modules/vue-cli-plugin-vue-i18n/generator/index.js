module.exports = (api, opts, rootOptions) => {
  api.extendPackage({
    dependencies: {
      'vue-i18n': '^9.1.2'
    }
  })

  api.injectImports(api.entryFile, `import installI18n from './lang/index'`)

  api.render({
    './src/lang/en.ts': './templates/src/lang/en.ts',
    './src/lang/zh.ts': './templates/src/lang/zh.ts',
    './src/lang/index.ts': './templates/src/lang/index.ts',
    './src/components/i18nDemo.tsx': './templates/src/components/i18nDemo.tsx',
  })

  api.afterInvoke(() => {
    const { EOL } = require('os')
    const fs = require('fs')
    const contentMain = fs.readFileSync(api.resolve(api.entryFile), { encoding: 'utf-8' })
   
    const lines = contentMain.split(/\r?\n/g)

    // const renderIndex = lines.findIndex(line => line.match(/createApp\(App\)(\.use\(\w*\))*\.mount\('#app'\)/))
    const renderIndex = lines.findIndex(line => line.match(/^createApp/))
    if (renderIndex > 0) {
      const renderContent = lines[renderIndex]
      lines[renderIndex] = `const app = createApp(App)`
      lines[renderIndex + 1] = `installI18n(app)`
      lines[renderIndex + 2]  = renderContent.replace('createApp\(App\)','app')

      fs.writeFileSync(api.resolve(api.entryFile), lines.join(EOL), { encoding: 'utf-8' })
    } else {
      // 此时是const app = createApp(App)格式 直接在下面追加installXX格式
      fs.appendFile(api.resolve(api.entryFile), '\ninstallI18n(app)', (err) => {
        if (err) throw err;
      })
    }
    
    // shims-vue.d.ts 声明 vue-i18n
    fs.appendFile(api.resolve('src/shims-vue.d.ts'), '\ndeclare module "vue-i18n"', (err) => {
      if (err) throw err;
    })
  })
}
